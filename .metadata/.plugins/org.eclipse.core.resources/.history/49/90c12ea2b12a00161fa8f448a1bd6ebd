package com.griffith.linkedlist;

public class SinglyLinkedList {
	// keeps track of the number of nodes in the list
	private static int size;
	// keeps track of the beginning of the list
	private Node head;

	public SinglyLinkedList() {
	}

		private class Node<E> {
			// The reference to the next node
			private E data;
			// The data in the current node
			private Node<E> next;
	
			public Node(E data) {
				this(data, null);
			}
	
			// Alternative constructor to use in case we want to set the nodes next value
			public Node(E data, Node<E> next) {
				this.data = data;
				this.next = next;
			}
		}

	// Appends the passed data to the end of the list
	public boolean add(Object data) {
		add(data, size);
		return true;
	}

	// public void add(Object data) {
	// if (head == null) {
	// head = new Node(data);
	// }
	//
	// Node tempNode = new Node(data);
	// Node currentNode = head;
	//
	// if (currentNode != null) {
	// while (currentNode.getNext() != null) {
	// currentNode = currentNode.getNext();
	// }
	// currentNode.setNext(tempNode);
	// }
	// size++;
	// }
	
	// Add an element at a specific spot in the list
	public void add(Object data, int index)
	{
		if(index < 0 || index > size)
		{
			throw new IndexOutOfBoundsException(Integer.toString(index));
		}
		if(index == 0)
		{
			
		}
		else
		{
			Node node = get(index - 1);
		}
	}
//	public void add(Object data, int index) {
//		Node tempNode = new Node(data);
//		Node currentNode = head;
//		// Check for null first before starting to traverse the list
//		if (currentNode != null) {
//			// Crawl over the list until you find the requested insertion spot
//			// or the end of the list
//			for (int i = 0; i < index && currentNode.getNext() != null; i++)
//				currentNode = currentNode.getNext();
//		}
//		tempNode.setNext(currentNode.getNext());
//		currentNode.setNext(tempNode);
//		size++;
//	}

	public int size() {
		return size;
	}	

	public Object get(int index) {
		if (index <= 0) {
			return null;
		}
		Node currentNode = null;
		if (head != null) {
			currentNode = head.next;
			for (int i = 0; i < index; i++) {
				if (currentNode.next == null) {
					return null;
				}
				currentNode = currentNode.next;
			}
			return currentNode.data;
		}
		return currentNode;
	}

	// public boolean remove(int index)
	// {
	// if(index < 1 || index >size())
	// {
	// return false;
	// }
	//
	//
	//
	// }

}
