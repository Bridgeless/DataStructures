package com.griffith.matrixrot;

public class Rotate90 {

	public static void main(String[] args) {
		int[][] arrayOne = 
		{
				{10, 11, 12, 13},
				{14, 15, 16, 17},
				{18, 19, 20, 21},
				{22, 23, 24, 25}
		};
		
//		int[][] rotatedArray = rotate(arrayOne); 
//		
//		for(int i = 0; i < rotatedArray.length; i++)
//		{
//			for(int j = 0; j < rotatedArray.length; j++)
//			{
//				System.out.print(rotatedArray[i][j] + " ");
//			}
//			System.out.println();
//		}
		
		
		int[][] rotatedIP = rotateInPlace(arrayOne, 45); 
		
		for(int i = 0; i < rotatedIP.length; i++)
		{
			for(int j = 0; j < rotatedIP.length; j++)
			{
				System.out.print(rotatedIP[i][j] + " ");
			}
			System.out.println();
		}
		
		
	}

	public static int[][] rotate(int[][] inputArr) {
		int[][] tempArr = new int[inputArr.length][inputArr.length];
		int end = inputArr.length - 1;

		for (int i = 0; i < inputArr.length; i++) {
			for (int j = 0; j < inputArr.length; j++) {
				tempArr[j][end] = inputArr[i][j];
			}
			end --;
		}
		return tempArr;
	}
	
	public static int[][] rotateInPlace(int[][] matrix, int n)
	{
		for(int layer = 0; layer < n/2; ++layer)
		{
			int first = layer;
			int last = n - 1 - layer;
			for(int i = first; i < last; ++i)
			{
				int offset = i - first;
				int top = matrix[first][i];
				matrix[first][i] = matrix[last-offset][first];
				matrix[last-offset][first] = matrix[last][last-offset];
				matrix[last][last-offset] = matrix[i][last];
				matrix[i][last] = top;
			}
		}
		return matrix;
	}

}
